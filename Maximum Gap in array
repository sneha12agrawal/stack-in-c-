#include <bits/stdc++.h>

using namespace std;

 int maxSortedAdjacentDiff(int* arr, int n) {
        if(n < 2)
            return 0;
            
        int minValue = *min_element(arr, arr + n);
        int maxValue = *max_element(arr, arr + n);
        int interval = (maxValue - minValue + n - 2) / (n - 1);

        vector<int> minBucket(n-1, INT_MAX);
        vector<int> maxBucket(n-1, INT_MIN); 

        for(int i = 0; i < n; i++) {
            if(arr[i] == minValue || arr[i] == maxValue)
                continue;
            else {
                int magic = (arr[i] - minValue) / interval;
                minBucket[magic] = min(minBucket[magic], arr[i]);
                maxBucket[magic] = max(maxBucket[magic], arr[i]);
            }
        }

        int ans = 0;
        int prevMax = minValue;
        for(int i = 0; i < n-1; i++) {
            if(minBucket[i] == INT_MAX || maxBucket[i] == INT_MIN)
                continue;
            else {
                ans = max(ans, minBucket[i] - prevMax);
                prevMax = maxBucket[i];
            }
        }
        ans = max(ans, maxValue - prevMax);
        return ans;
    }
}


int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        int a[n];
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.maxSortedAdjacentDiff(a, n);
        cout << ans << "\n";
    }
    return 0;
}
