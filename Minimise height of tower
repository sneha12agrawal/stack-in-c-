

#include <bits/stdc++.h>
using namespace std;

 }

class Solution{   
public:
   int getMinDiff(int arr[], int n, int k) {
    // Sort the array
    sort(arr, arr + n);

    // Initialize the result
    int minHeightDiff = arr[n - 1] - arr[0];

    // Iterate through each tower
    for (int i = 0; i < n - 1; ++i) {
        int currentTower = arr[i];
        int nextTower = arr[i + 1];

        int minTowerHeight = min(arr[0] + k, nextTower - k);
        int maxTowerHeight = max(arr[n - 1] - k, currentTower + k);

        // Update the result if needed
        minHeightDiff = min(minHeightDiff, maxTowerHeight - minTowerHeight);
    }

    return minHeightDiff;
}
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> k;
        cin >> n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.getMinDiff(arr, n, k);
        cout << ans << "\n";
    }
    return 0;
}
// }
