#include <iostream>
#include <stack>
#include <string>

using namespace std;


    int prec(char c) {
        if (c == '^') {
            return 3;
        } else if (c == '*' || c == '/') {
            return 2;
        } else if (c == '+' || c == '-') {
            return 1;
        }
        return -1; // Default case to handle invalid characters
    }
    // Function to convert an infix expression to a postfix expression.
    string infixToPostfix(string s) {
        stack<char> st;
        string res;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'||s[i]>='1'&&s[i]<='9') {
                res += s[i];
            } else if (s[i] == '(') {
                st.push(s[i]);
            } else if (s[i] == ')') {
                while (!st.empty() && st.top() != '(') {
                    res += st.top();
                    st.pop();
                }
                if (!st.empty()) {
                    st.pop();
                } else {
                    // Handle mismatched parentheses
                    cout << "Error: Mismatched parentheses\n";
                    return "";
                }
            } else {
                while (!st.empty() && prec(st.top()) >= prec(s[i])) {
                    res += st.top();
                    st.pop();
                }
                st.push(s[i]);
            }
        }
        while (!st.empty()) {
            if (st.top() == '(') {
                // Handle mismatched parentheses
                cout << "Error: Mismatched parentheses\n";
                return "";
            }
            res += st.top();
            st.pop();
        }
        return res;
    }
};

int main() {
    InfixToPostfixConverter converter;
    string infixExpression = "a+b*(c^d-e)^(f+g*h)-i";
    cout << "Infix Expression: " << infixExpression << endl;
    string postfixExpression = converter.infixToPostfix(infixExpression);
    if (!postfixExpression.empty()) {
        cout << "Postfix Expression: " << postfixExpression << endl;
    }
    return 0;
}
